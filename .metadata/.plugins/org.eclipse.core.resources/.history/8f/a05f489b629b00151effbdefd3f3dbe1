from geopy.distance import vincenty


#Beacon Configuration
bShape="Cylinder" #Beacon Shape
nFBehavior="RTL" #Beacon behavior for unknown drones or drones inside no-fly
bRadius=15 #Beacon Radius in meters
bLoc=[40.399479, -74.299261, 200] #Beacon Lat/Long/Alt

droneList={}  #Drone dictionary
droneList["drone1"]=[40.399479, -74.299258, 2005] #Drone Lat/Long/Alt
droneList["drone2"]=[40.394720, -73.987302, 20]
#adjust beacon location accuracy for comparison to drone
try:
    dLatAc=len(str(droneList["drone1"][0])) #get accuracy of drone Lat
    dLonAc=len(str(droneList["drone1"][1])) #get accuracy of drone long
    adjBLoc=[str(bLoc[0])[:dLatAc], str(bLoc[1])[:dLonAc]] #adjusted beacon accuracy
except:
    #request drone info. Upon 3 failures of same drone use DoS attack
    print("No Drone Info! Requesting Info or initiating DoS Attack")
print("Beacon GPS Location: "+ str(bLoc))
print("Drone GPS Location: "+str(droneList["drone1"]))


if bShape=="Cylinder":
    try:
        dDist=round(vincenty(adjBLoc,droneList["drone1"]).meters,2)
        print("Drone's Lat/Long distance from beacon: "+str(dDist))
        if dDist>bRadius:
            #send serial data about beacon and request drone info
            print("Drone outside no-fly")
        elif dDist<=bRadius:
            print("Drone is inside beacon lat/long")
            try:
                if droneList["drone1"][2]>bLoc[2]:
                    #send serial data about beacon and request drone info
                    print("Drone is over no-fly")
                else:
                    #send serial data for NFBehavior
                    print("Drone is in no-fly")
            except:
                #send NFBehavior
                print("Assume drone is in no-fly")
            
    except:
        #request drone info. Upon 3 failures of same drone use DoS attack
        print("Unknown failure. Requesting Info or initiating DoS Attack")
